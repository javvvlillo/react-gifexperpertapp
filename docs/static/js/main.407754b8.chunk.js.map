{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","helpers/getGifs.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","reportWebVitals.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","GifGridItem","id","title","url","className","src","alt","getGifs","category","a","encodeURI","fetch","resp","json","data","gifs","map","img","images","downsized_medium","GifGrid","loading","state","setState","useEffect","then","useFetchGifs","GifExpertApp","categories","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"4LAGaA,EAAc,SAAC,GAAyB,IAAtBC,EAAqB,EAArBA,cAAqB,EAGZC,mBADf,IAF2B,mBAGzCC,EAHyC,KAG7BC,EAH6B,KAqBhD,OACI,sBAAMC,SAbW,SAACC,GAClBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAE3BR,GAAc,SAAAS,GAAI,MAAI,CAAEP,MACxBC,EAAc,MAOlB,SACI,uBACIO,KAAK,OACLC,MAAST,EACTU,SArBc,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,a,OCPlBG,EAAc,SAAC,GAAuB,EAArBC,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,IACrC,OACI,sBAAKC,UAAU,yCAAf,UACI,qBAAKC,IAAMF,EAAMG,IAAMJ,IACvB,4BAAKA,Q,uBCLJK,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEZN,EAFY,iDAEqCO,UAAUF,GAF/C,+DAGAG,MAAOR,GAHP,cAGbS,EAHa,gBAIGA,EAAKC,OAJR,uBAIZC,EAJY,EAIZA,KAEDC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHhB,GAAIgB,EAAIhB,GACRC,MAAOe,EAAIf,MACXC,IAAG,UAAEc,EAAIC,cAAN,aAAE,EAAYC,iBAAiBhB,QAVvB,kBAcZY,GAdY,4CAAH,sDCIPK,EAAU,SAAC,GAAkB,IAAhBZ,EAAe,EAAfA,SAAe,ECFb,SAAEA,GAAe,IAAD,EAEdrB,mBAAS,CAC/B2B,KAAK,GACLO,SAAS,IAJ2B,mBAEjCC,EAFiC,KAE1BC,EAF0B,KAkBxC,OAXAC,qBAAW,WAEPjB,EAASC,GAAWiB,MAAK,SAAAR,GACrBM,EAAS,CACLT,KAAMG,EACNI,SAAS,SAIlB,CAAEb,IAEEc,EDd2BI,CAAclB,GAAlCU,EAFuB,EAE7BJ,KAAcO,EAFe,EAEfA,QAEtB,OACI,qCACI,qBAAIjB,UAAU,oCAAd,cAAqDI,EAArD,OAEEa,GAAW,mBAAGjB,UAAU,mCAAb,yBACb,qBAAKA,UAAU,YAAf,SAGQc,EAAOF,KAAK,SAAAC,GAAG,OACX,cAAC,EAAD,eAESA,GADAA,EAAIhB,aEatB0B,EA3BM,WAAO,IAAD,EAEaxC,mBAAS,IAFtB,mBAEhByC,EAFgB,KAEJ1C,EAFI,KAIvB,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAkBA,IAE/B,uBAIA,6BAEQ0C,EAAWZ,KAAK,SAAAR,GAAQ,OACxB,cAAC,EAAD,CAEIA,SAAWA,GADLA,YCVfqB,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBN,MAAK,YAAkD,IAA/CO,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,QCAdO,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,SAM1BX,M","file":"static/js/main.407754b8.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nexport const AddCategory = ( { setCategories } ) => {\n\n    const initialState = '';\n    const [inputValue, setInputValue] = useState(initialState);\n\n    const handleInputChange = (e) => {\n        setInputValue(e.target.value);\n    };\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n\n        if( inputValue.trim().length > 0 ) {\n\n            setCategories(cats => [ inputValue ]);\n            setInputValue('');    \n        }\n\n        \n    }\n\n    return (\n        <form onSubmit={ handleSubmit }>\n            <input\n                type=\"text\"\n                value= { inputValue }\n                onChange = { handleInputChange  }\n            />   \n        </form>\n    )\n}\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}\n","import React from 'react'\n\nexport const GifGridItem = ( {id, title, url} ) => {\n    return (\n        <div className=\"card animate__animated animate__fadeIn\">\n            <img src={ url } alt={ title }></img>\n            <p>{ title }</p>\n        </div>\n    )\n}\n","\nexport const getGifs = async (category) => {\n\n    const  url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=10&api_key=eviL9DqFuyEICF1HnM6y0OXbQrObMD6y`;\n    const resp = await fetch( url );\n    const{ data } = await resp.json();\n\n    const gifs = data.map( img => {\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url\n        }\n    });\n\n    return gifs;\n}","import React from 'react'\n// import { getGifs } from '../helpers/getGifs';\nimport { GifGridItem } from './GifGridItem';\nimport { useFetchGifs } from '../hooks/useFetchGifs';\n\nexport const GifGrid = ({ category }) => {\n    \n    const { data: images ,loading } = useFetchGifs( category );    \n\n    return (\n        <>\n            <h3 className=\"animate__animated animate__fadeIn\"> { category } </h3> \n\n            { loading && <p className=\"animate__animated animate__flash\">Cargando...</p> } \n            <div className=\"card-grid\">\n                \n                {\n                    images.map( img => (\n                        <GifGridItem\n                            key={img.id}\n                            { ...img } />\n                    ))\n                }\n                \n            </div>\n        </>\n    )\n}\n","import { useEffect, useState } from 'react';\nimport { getGifs } from '../helpers/getGifs';\n\nexport const useFetchGifs = ( category ) => {\n\n    const [state, setState] = useState({\n        data:[],\n        loading: true, \n    });\n\n    useEffect( () => {\n        \n        getGifs( category ).then(img => {\n            setState({\n                data: img,\n                loading: false\n            })\n        })\n\n    }, [ category ]);\n\n    return state;\n    \n} ","\nimport React, { useState } from 'react';\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\nconst GifExpertApp = () => {\n\n    const [categories, setCategories] = useState([]);\n\n    return (\n        <>\n            <h2>GifExpertApp</h2>\n            <AddCategory setCategories = { setCategories } />\n            \n            <hr/>\n\n            \n\n            <ol>\n                {\n                    categories.map( category => (\n                    <GifGrid\n                        key={ category}\n                        category={ category }/> \n                        )\n                    )\n                }\n            </ol>\n        </>\n    );\n}\n\nexport default GifExpertApp;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\n\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}